plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

def commonDependencyModules = ["merchants-service", "payment-service", "users-service"]

subprojects {
    def currentModule = it.name
    if (currentModule != 'grpc-common') {
        group = 'az.fintech.microservices'
        version = '0.0.1-SNAPSHOT'

        apply plugin: 'java'
        apply plugin: 'io.spring.dependency-management'
        apply plugin: 'org.springframework.boot'

        repositories {
            mavenCentral()
        }

        dependencyManagement {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:2020.0.3"
            }
        }

        if (commonDependencyModules.contains(currentModule)) {
            dependencies {
                implementation 'org.liquibase:liquibase-core'
                implementation 'io.springfox:springfox-boot-starter:3.0.0'
                implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
                runtimeOnly 'org.postgresql:postgresql'
                testImplementation 'org.springframework.boot:spring-boot-starter-test'
            }
        }


        def hasModuleLombok = commonDependencyModules.contains(currentModule)
                || currentModule == 'api-gateway' || currentModule == 'auth-service'
        if (hasModuleLombok) {
            dependencies {
                compileOnly 'org.projectlombok:lombok'
                annotationProcessor 'org.projectlombok:lombok'
            }
        }


        def hasModuleSpringWeb = commonDependencyModules.contains(currentModule)
                || currentModule == 'auth-service'
        if (hasModuleSpringWeb) {
            dependencies {
                implementation 'org.springframework.boot:spring-boot-starter-web'
            }
        }

        if (currentModule != 'config-server') {
            dependencies {
                implementation 'org.springframework.cloud:spring-cloud-starter-config'
            }
        }


        tasks.register('prepareKotlinBuildScriptModel') {}
        tasks.register('wrapper') {}
    }
}