buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
    }
}

plugins {
    id 'nu.studer.jooq' version "$studerJooqVersion"
    id 'pl.allegro.tech.build.axion-release' version "$axionReleaseVersion"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

dependencies {
    implementation "io.jsonwebtoken:jjwt-api:$jwtVersion"
    implementation "io.jsonwebtoken:jjwt-impl:$jwtVersion"
    implementation "io.jsonwebtoken:jjwt-jackson:$jwtVersion"
    implementation "eu.bitwalker:UserAgentUtils:$userAgentUtilsVersion"
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    jooqGenerator "org.postgresql:postgresql:$jooqGeneratorPostgreVersion"
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
    implementation "io.springfox:springfox-boot-starter:$swaggerSpringFoxVersion"
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
}


jooq {
    version = '3.15.1'  // the default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/user_db'
                    user = 'postgres'
                    password = '123'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'require'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'com.example'
                        directory = 'build/generated-src/jooq/main'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}


tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('generateJooq').configure {
    allInputsDeclared = true
}